<?xml version="1.0" encoding="utf-8"?>

<launch>

    <arg name="sphinx" default="true"/>
    <arg name="unity" default="true"/>
    <arg name="physical" default="false"/>
    <arg name="vicon" default="false"/>
    <arg name="control_second_drone" default="true"/>
    <arg name="multiview" default="false"/>
    <arg name="controller" default="js0"/>
    <arg name="yaw_debug" default="false"/>
    <arg name="area_debug" default="false"/>
    <arg name="distance_debug" default="false"/>
    <arg name="force_debug" default="false"/>
    <arg name="fast" default="false"/>
    <arg name="save_data" default=""/>

    <!-- Launch main file -->
    <include file="$(find drone_controller)/launch/main.launch">
        <arg name="launch_unity" value="$(arg unity)" />
        <arg name="launch_shinx" value="$(arg sphinx)" />
        <arg name="launch_physical" value="$(arg physical)" />
        <arg name="launch_vicon" value="$(arg vicon)" />
        <arg name="launch_multiview" value="$(arg multiview)" />
        <arg name="yaw_debug_plot" value="$(arg yaw_debug)" />
        <arg name="force_debug_plot" value="$(arg force_debug)" />
        <arg name="output_data_save_name" value="$(arg save_data)" />
    </include>

    <!-- Launch backup controller on xbox -->
    <include file="$(find drone_controller)/launch/backup_safety.launch">
        <arg name="controller" value="$(arg controller)" />
    </include>

    <!-- The avoidance controller code -->
    <node pkg="drone_controller" name="program_controller_node" type="avoidance_scenario_controller.py" output="screen">
    </node>

    <node pkg="drone_controller" name="avoidance_node" type="avoidance_navigation.py" output="screen">
    </node> 

    <!-- Launch darknet ros -->
    <include file="$(find darknet_ros)/launch/darknet_ros.launch">
        <arg name="image" default="/mixer/sensors/camera" />
        <arg name="network_param_file" default="$(find darknet_ros)/config/yolov2-tiny.yaml"/>
    </include>

    <!-- Mixing functions -->
    <node pkg="mixing_functions" name="color_threshold_node" type="color_threshold.py" output="screen">
        <param name="lower_bound/H" type="int" value="0" />
        <param name="lower_bound/S" type="int" value="0" />
        <param name="lower_bound/V" type="int" value="0" />
        <param name="upper_bound/H" type="int" value="255" />
        <param name="upper_bound/S" type="int" value="255" />
        <param name="upper_bound/V" type="int" value="150" />

        <param name="input_topic" type="string" value="/uav1/sphinx_sensors/camera" />
        <param name="output_topic" type="string" value="/uav1/overlay/camera" />

        <param name="invert_background" type="bool" value="True" />
    </node> 

    <!-- Mixed reality node -->
    <node pkg="mixed_reality" name="mixer_node" type="mixer.py" output="screen">
        <param name="ignore_white" type="bool" value="True" />
        <param name="ignore_black" type="bool" value="False" />
    </node>

    <!-- Compute the distance between the two drones -->
    <node pkg="information_extraction" name="distance_calculator" type="distance_calculator.py" output="screen">
    </node>

    <!-- Connect to second drone -->
    <group if="$(arg control_second_drone)">
        <node pkg="drone_controller" name="obstacle_drone_node" type="obstacle_drone.py" output="screen"> 
            <param name="/simulated_ip" type="bool" value="True" />
            <param name="/fast" type="bool" value="$(arg fast)" />
        </node>

        <group if="$(arg unity)">
            <node pkg="unity_communication" name="UnityRosConnection2" type="UnityRosConnection.py" output="screen">
                <param name="/port" type="int" value="55555" />
                <param name="/position_topic_name" type="string" value="/ground_truth/uav2/pose" />
            </node>
        </group>
    </group>

    <!-- Optional views -->
    <group if="$(arg area_debug)">
        <node pkg="rqt_gui" name="area_plot" type="rqt_gui" respawn="false" output="screen" args="--perspective-file $(find drone_controller)/rqt_config/debug_drone_area.perspective"/>
    </group>

    <group if="$(arg distance_debug)">
        <node pkg="rqt_gui" name="distance_plot" type="rqt_gui" respawn="false" output="screen" args="--perspective-file $(find drone_controller)/rqt_config/debug_drone_distance.perspective"/>
    </group>

    <group if="$(arg multiview)">
        <node pkg="rqt_image_view" type="rqt_image_view" name="test_color" args="/uav1/overlay/camera" output="screen"/>
    </group>

</launch>
